// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;

#define LEN 4
struct Ray
{
    float2 v;
    int ptsUsed;
};

StructuredBuffer<Ray> rays;

struct Point
{
    float2 v;
    float radiationLvl;
};

StructuredBuffer<Point> points;

float resolution;
float scalar;

float low;
float high;

float4 filling;
float4 defaultColor;
float4 transparent;

float maxDistance;
#define initRadLvl 10
#define decrease 1

float sqrDistance(float2 a, float2 b)
{
    float2 v = a - b;
    return v.x * v.x + v.y * v.y;
}

int binSearch(float2 T)
{
    uint n,  _;
    rays.GetDimensions(n, _);

    T.y *= -1; // smell code so this will work :)

    uint m;
    uint L = 0;
    uint R = n - 1;

    while (L < R + 1)
    {
        m = floor((L + R) / 2);
        float2 v = rays[m].v;
        if (cross(float3(v.x, v.y, 0.0), float3(T.x, T.y, 0.0)).z > 0)
            L = m + 1;
        else
            R = m - 1;
    }
    return L - 1;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // get pixelPosition
    float2 pixelPosition = id - resolution / 2 + 0.5;
    pixelPosition /= scalar;

    // circle borders
    float pixelDistance = sqrDistance(pixelPosition, float2(0.0, 0.0));
    if (pixelDistance > maxDistance)
    {
        result[id.xy] = transparent;
        return;
    }

    //uint radLvl = initRadLvl;

    // threshold
    float4 color = defaultColor;

    int rayInd = binSearch(pixelPosition);
    // float points1[LEN] = {
    //     rays[rayInd*LEN + 0],
    //     rays[rayInd*LEN + 1],
    //     rays[rayInd*LEN + 2],
    //     rays[rayInd*LEN + 3],
    // }

    // float points1[LEN] = {
    //     rays[(rayInd + 1)*LEN + 0],
    //     rays[(rayInd + 1)*LEN + 1],
    //     rays[(rayInd + 1)*LEN + 2],
    //     rays[(rayInd + 1)*LEN + 3],
    // }

    Ray a = rays[rayInd];
    Ray b = rays[rayInd + 1];

    if (a.ptsUsed == 0 && b.ptsUsed == 0)
    {
        // no intersections, pass
    }
    else if (a.ptsUsed == 0 || b.ptsUsed == 0)
    {
        // one ray have no intersections, another - more than 0

        color = (filling + defaultColor) / 2;
    }
    else
    {
        // both rays have intersections

        color = filling;
    }

    // farther the point less alpha channel
    color.w = 1 - pixelDistance / maxDistance;
    result[id.xy] = color;
}
