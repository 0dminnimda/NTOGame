// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;

StructuredBuffer<float2> points;

float resolution;
float scalar;

float low;
float high;

float4 red;
float4 defaultColor;
float4 transparent;

float maxDistance;

float sqrDistance(float2 a, float2 b)
{
    float2 v = a - b;
    return v.x * v.x + v.y * v.y;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 color = defaultColor;
    float2 pixelPosition = id - resolution / 2 + 0.5;
    pixelPosition /= scalar;

    if (sqrDistance(pixelPosition, float2(0.0, 0.0)) > maxDistance)
    {
        result[id.xy] = transparent;
        return;
    }

    uint len, _;
    points.GetDimensions(len, _);
    if (len > 0)
    {
        float minimum = sqrDistance(pixelPosition, points[0]);
        for (uint i = 1; i < len; i++)
        {
            minimum = min(sqrDistance(pixelPosition, points[i]), minimum);
        }
        if (low <= minimum && minimum <= high)
            color = red;
    }

    result[id.xy] = color;
}
