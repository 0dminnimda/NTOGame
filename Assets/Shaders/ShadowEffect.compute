// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
// #pragma enable_d3d11_debug_symbols

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;

#define LEN 4
struct Ray
{
    float2 v;
    uint ptsUsed;
};

StructuredBuffer<Ray> rays;

struct Point
{
    float2 v;
    float radiationLvl;
};

StructuredBuffer<Point> points;

float resolution;
float scalar;

float4 filling;
float4 defaultColor;
float4 transparent;

float maxDistance;
float initRadLvl;

float sqrDistance(float2 a, float2 b = float2(0.0, 0.0))
{
    float2 v = a - b;
    return v.x * v.x + v.y * v.y;
}

int binSearch(float2 T)
{
    uint n,  _;
    rays.GetDimensions(n, _);

    T.y *= -1; // smell code so this will work :)

    uint m;
    uint L = 0;
    uint R = n - 1;

    while (L < R + 1)
    {
        m = floor((L + R) / 2);
        float2 v = rays[m].v;
        if (cross(float3(v.x, v.y, 0.0), float3(T.x, T.y, 0.0)).z > 0)
            L = m + 1;
        else
            R = m - 1;
    }
    return L - 1;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // get pixelPosition
    float2 pixelPosition = id - resolution / 2 + 0.5;
    pixelPosition /= scalar;

    // circle borders
    float pixelDistance = sqrDistance(pixelPosition);
    if (pixelDistance > maxDistance)
    {
        result[id.xy] = transparent;
        return;
    }

    float4 color = defaultColor;
    int rayInd = binSearch(pixelPosition);

    Ray a = rays[rayInd];
    Ray b = rays[rayInd + 1];

    float radLvl = initRadLvl;

    if (a.ptsUsed == 0 && b.ptsUsed == 0)
    {
        // no intersections, pass
    }
    else if (a.ptsUsed == 0 || b.ptsUsed == 0)
    {
        // one ray have no intersections, another - more than 0

        int current = a.ptsUsed == 0 ? (rayInd + 1) : rayInd;
        uint used = a.ptsUsed == 0 ? b.ptsUsed : a.ptsUsed;
        int ind = used - 1;

        for (int i = 0; i < used; i++)
        {
            if (pixelDistance < sqrDistance(points[current*LEN + i].v))
            {
                ind = i - 1;
                break;
            }
        }

        if (ind >= 0)
        {
            radLvl = points[current*LEN + ind].radiationLvl;
            color = (filling + defaultColor) / 2;
        }
    }
    else
    {
        // both rays have intersections

        color = filling;
    }

    // farther the point less alpha channel
    color.w = radLvl / initRadLvl;// - pixelDistance / maxDistance;
    result[id.xy] = color;
}
