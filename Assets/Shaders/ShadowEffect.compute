// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> result;

struct Ray
{
    float2 v;
    int ptsUsed;
};

StructuredBuffer<Ray> rays;
StructuredBuffer<float2> points;

float resolution;
float scalar;

float low;
float high;

float4 red;
float4 defaultColor;
float4 transparent;

float maxDistance;
//int step;

float sqrDistance(float2 a, float2 b)
{
    float2 v = a - b;
    return v.x * v.x + v.y * v.y;
}

int binSearch(float2 T)
{
    uint n,  _;
    rays.GetDimensions(n, _);

    uint m;
    uint L = 0;
    uint R = n - 1;
    // uint cstep = 0;

    while (L < R + 1) // && cstep < step
    {
        m = floor((L + R) / 2);
        float2 v = rays[m].v;
        if (cross(float3(v.x, v.y, 0.0), float3(T.x, T.y, 0.0)).z > 0)
            L = m + 1;
        else
            R = m - 1;
        // cstep++;
    }
    return L - 1;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 color = defaultColor;
    // get pixelPosition
    float2 pixelPosition = id - resolution / 2 + 0.5;
    pixelPosition /= scalar;

    // circle borders
    float pixelDistance = sqrDistance(pixelPosition, float2(0.0, 0.0));
    if (pixelDistance > maxDistance)
    {
        result[id.xy] = transparent;
        return;
    }

    uint len, _;
    points.GetDimensions(len, _);
    if (len > 0)
    {
        float minimum = maxDistance;
        for (uint i = 0; i < len; i++)
        {
            if (all(points[i] != 0.0))
                minimum = min(sqrDistance(pixelPosition, points[i]), minimum);
        }
        if (low <= minimum && minimum <= high)
            color = red;
    }

    color.w = 1 - pixelDistance / maxDistance;
    result[id.xy] = color;
}
